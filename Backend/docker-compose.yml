version: '3.8'

services:

  ## Eureka Server
  eureka:
    build: ./eureka-service-discovery
    container_name: eureka
    ports:
      - "8761:8761"
    networks:
      - micro-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 15s
      retries: 10
      start_period: 60s
      timeout: 10s

  ## API Gateway
  gateway:
    build: ./api-gateway
    container_name: gateway
    depends_on:
      eureka:
        condition: service_healthy
    ports:
      - "1000:1000"
    networks:
      - micro-net

  ## Auth Service
  auth-service:
    build: ./auth-service
    container_name: auth-service
    depends_on:
      eureka:
        condition: service_healthy
      auth-db:
        condition: service_started
    ports:
      - "8081:8081"
      - "5001:5001"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://auth-db:3306/auth_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    networks:
      - micro-net

  ## Finance Service
  finance-service:
    build:
      context: .
      dockerfile: ./finance-service/Dockerfile
    container_name: finance-service
    depends_on:
      eureka:
        condition: service_healthy
      finance-db:
        condition: service_started
      kafka:
        condition: service_started
    ports:
      - "8082:8082"
      - "5002:5002"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://finance-db:3306/finance_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - micro-net

  ## Auth Database
  auth-db:
    image: mysql:8
    container_name: auth-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: auth_db
    ports:
      - "3307:3306"
    volumes:
      - auth-data:/var/lib/mysql
    networks:
      - micro-net

  ## Finance Database
  finance-db:
    image: mysql:8
    container_name: finance-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: finance_db
    ports:
      - "3308:3306"
    volumes:
      - finance-data:/var/lib/mysql
    networks:
      - micro-net

  ## Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - micro-net

  ## Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: >
        transactions:1:1,
        budgets:1:1,
        monthly-summary:1:1
    networks:
      - micro-net

  ## Kafka UI (Optional Dashboard)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - micro-net

  # MailHog for local SMTP testing
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "8025:8025"   # web UI
      - "1025:1025"   # SMTP
    networks:
      - micro-net

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "8083:8083"
      - "5003:5003"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - AUTH_SERVICE_BASE_URL=http://auth-service:8081
    depends_on:
      - kafka
      - auth-service
      - mailhog
    networks:
      - micro-net


networks:
  micro-net:
    driver: bridge

volumes:
  auth-data:
  finance-data:
